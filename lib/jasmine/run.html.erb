<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta content="text/html;charset=UTF-8" http-equiv="Content-Type"/>
  <title>Jasmine suite</title>
  <link rel="shortcut icon" type="image/png" href="/__JASMINE_ROOT__/images/jasmine_favicon.png">
  <% css_files.each do |css_file| %>
    <link rel="stylesheet" href="<%= css_file %>" type="text/css" media="screen"/>
  <% end %>

  <% jasmine_files.each do |jasmine_file| %>
  <script src="<%= jasmine_file %>" type="text/javascript"></script>
  <% end %>

  <script type="text/javascript">
    var jsApiReporter;
    (function() {
      var jasmineEnv = jasmine.getEnv();

      jsApiReporter = new jasmine.JsApiReporter();
      var htmlReporter = new jasmine.HtmlReporter();

      jasmineEnv.addReporter(jsApiReporter);
      jasmineEnv.addReporter(htmlReporter);

      jasmineEnv.specFilter = function(spec) {
        return htmlReporter.specFilter(spec);
      };

      var currentWindowOnload = window.onload;

      window.onload = function() {
        if (currentWindowOnload) {
          currentWindowOnload();
        }
        execJasmine();
      };

      function execJasmine() {
        jasmineEnv.execute();
      }

    })();

    jasmine._runner_ = {
      expectedFiles: [<%= js_files.map {|file| file.inspect }.join(', ') %>],
      loadedFiles: {},
      errors: {},
      addError: function(error) {
        var errors = this.errors[this.currentFile] || (this.errors[this.currentFile] = []);
        errors.push(error);
      },
      fileLoaded: function() {
        this.loadedFiles[this.currentFile] = true;
      },
      onError: function(message, file, line) {
        jasmine._runner_.addError({
          message: message,
          file: file,
          line: line
        });
      },
      oldOnError: window.onerror
    };

    window.onerror = jasmine._runner_.onError;
  </script>

  <% js_files.each do |js_file| %>
    <script type="text/javascript">jasmine._runner_.currentFile = <%= js_file.inspect %>;</script>
    <script src="<%= js_file %>" type="text/javascript"></script>
  <% end %>

  <script type="text/javascript">
    describe("JS file loading", function() {
      var runner = jasmine._runner_;
      for (var i = 0, length = runner.expectedFiles.length; i < length; i++) {
        var expectedFile = runner.expectedFiles[i],
            errors = runner.errors[expectedFile],
            loaded = runner.loadedFiles[expectedFile];

        if (!loaded || (errors && errors.length)) {
          (function(loaded, errors, expectedFile) {
            it("succeeds for "+expectedFile, function() {
              if (!loaded) {
                this.fail(expectedFile + " failed to load");
              }

              if (errors && errors.length) {
                for (var j = 0; j < errors.length; j++) {
                  var error = errors[j];
                  this.fail(expectedFile + ": " + error.message + " at " + error.file+":"+error.line);
                }
              }
            });
          })(loaded, errors, expectedFile);
        }
      }
    });

    if (window.onerror == jasmine._runner_.onError) {
      window.onerror = jasmine._runner_.oldOnError;
    }
  </script>
</head>
<body>
<div id="jasmine_content"></div>
</body>
</html>
